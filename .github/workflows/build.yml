name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            label: linux-amd64
            static: true
          - os: ubuntu-latest
            arch: arm64
            label: linux-arm64
            static: true
          - os: windows-latest
            arch: amd64
            label: windows-amd64
            static: true
          - os: macos-latest
            arch: amd64
            label: macos-amd64
            static: false
          - os: macos-14
            arch: arm64
            label: macos-arm64
            static: false

    steps:
    - uses: actions/checkout@v4

    - name: Setup GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: '17'
        distribution: 'graalvm'
        github-token: ${{ secrets.GITHUB_TOKEN }}
        native-image-job-reports: 'true'
        architecture: ${{ matrix.arch }}

    - name: Build with Maven
      run: mvn -B clean package --file pom.xml

    - name: Upload JAR Artifacts
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: target/*-jar-with-dependencies.jar
        retention-days: 5

    - name: Build Native Image (Windows)
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        echo "Creating native-image directory..."
        if not exist "target\native-image" mkdir "target\native-image"
        
        echo "Listing source JAR file..."
        dir "target\ChatOn-*-jar-with-dependencies.jar"
        
        echo "Copying JAR file..."
        for /f "delims=" %%i in ('dir /b "target\ChatOn-*-jar-with-dependencies.jar"') do (
          echo "Found JAR: %%i"
          copy /b "target\%%i" "target\native-image\ChatOn.jar"
        )
        
        echo "Verifying copied JAR..."
        dir "target\native-image\ChatOn.jar"
        
        echo "Copying config directory..."
        if exist "src\main\java\config-dir" (
          xcopy /E /I /Y "src\main\java\config-dir" "target\native-image\config-dir"
        ) else (
          echo "Config directory not found!"
          exit 1
        )
        
        echo "Starting native-image build..."
        cd "target\native-image"
        
        echo "Verifying current directory contents..."
        dir
        
        echo "Running native-image command..."
        native-image.cmd ^
        -J-Xmx8G ^
        -H:ConfigurationFileDirectories=config-dir ^
        -H:+AddAllCharsets ^
        -jar ChatOn.jar ^
        -H:Name=ChatOn-windows-amd64 ^
        --enable-https ^
        --enable-http ^
        --static ^
        --no-fallback ^
        --initialize-at-run-time ^
        --initialize-at-run-time=ModelsHandler ^
        --initialize-at-build-time=Main ^
        --initialize-at-build-time=CompletionHandler ^
        --initialize-at-run-time=utils.BearerTokenGenerator
        
        echo "Native image build completed"
        
        echo "Verifying output..."
        dir ChatOn-windows-amd64.exe

    - name: Upload Native Build (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: chaton-${{ matrix.label }}
        path: target/native-image/ChatOn-${{ matrix.label }}.exe
        retention-days: 5


    - name: Build Native Image (Linux/MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: |
        mkdir -p target/native-image
        cp target/*-jar-with-dependencies.jar target/native-image/ChatOn.jar
        cp -r src/main/java/config-dir target/native-image/
        cd target/native-image
        native-image \
          -H:ConfigurationFileDirectories=./config-dir \
          -H:+AddAllCharsets \
          -jar ChatOn.jar \
          -H:Name=ChatOn-${{ matrix.label }} \
          --enable-https \
          --enable-http \
          ${{ matrix.static == true && '--static' || '' }} \
          --no-fallback \
          --initialize-at-run-time \
          --initialize-at-run-time=ModelsHandler \
          --initialize-at-build-time=Main \
          --initialize-at-build-time=CompletionHandler \
          --initialize-at-run-time=utils.BearerTokenGenerator

    - name: Upload Native Build
      uses: actions/upload-artifact@v4
      with:
        name: chaton-${{ matrix.label }}
        path: target/native-image/ChatOn-${{ matrix.label }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
        retention-days: 5

    - name: Get version
      if: github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      id: get_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create Release
      if: github.event_name == 'push' && matrix.os == 'ubuntu-latest' && matrix.arch == 'amd64'
      uses: softprops/action-gh-release@v1
      with:
        files: |
          target/*-jar-with-dependencies.jar
          target/native-image/ChatOn-*
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
